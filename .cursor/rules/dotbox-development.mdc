---
description: 
globs: 
alwaysApply: true
---
# 🏗️ DotBox Development Rules & Architectural Standards

*Comprehensive development guidelines based on DotBox Monitor - a clean, scalable monitoring dashboard*

## 🎯 Core Philosophy

### **Code Quality First**
- **SOLID Principles**: Single responsibility, clean separation of concerns
- **DRY Principle**: Don't repeat yourself - create reusable components
- **Consistent Patterns**: Follow established patterns throughout the codebase
- **Security by Default**: Secure authentication, input validation, proper error handling
- **Performance Minded**: Efficient queries, debounced updates, smart rendering

### **Technology Stack Standards**
- **Frontend**: Vanilla JavaScript (ES6+), no TypeScript, class-based architecture
- **Backend**: Node.js with Express.js, clean middleware approach
- **Database**: SQLite with proper schema design and CRUD patterns
- **Real-time**: Socket.IO for live updates with connection management
- **Authentication**: Session-based with multiple auth methods
- **Deployment**: Docker-ready with environment configuration

---

## 📁 Project Structure Standards

### **Directory Architecture**
```
project-root/
├── public/                 # Frontend assets
│   ├── components/         # Component architecture
│   │   ├── base/          # Generic, reusable components
│   │   │   └── ComponentName/
│   │   │       ├── ComponentName.js    # Core functionality
│   │   │       └── ComponentName.css   # Generic styling
│   │   └── app/           # Application-specific components
│   │       └── ComponentName/
│   │           ├── ComponentName.js     # App-specific logic
│   │           └── ComponentName.css    # App-specific styling
│   ├── css/               # Global styles
│   ├── img/               # Static images
│   ├── app.js             # Main application controller
│   ├── index.html         # Main UI
│   └── login.html         # Authentication UI
├── lib/                   # Backend libraries
│   ├── database.js        # Database abstraction layer
│   └── healthCheck.js     # Business logic services
├── agent/                 # External agents/services
├── config/               # Configuration files
├── data/                 # Database and data files
├── server.js             # Main server entry point
├── package.json          # Dependencies and scripts
├── docker-compose.yml    # Container orchestration
├── Dockerfile           # Container definition
├── .env.example         # Environment template
└── README.md            # Comprehensive documentation
```

### **File Naming Conventions**
- **PascalCase**: Component folders and files (`ModalDialog/`, `SettingsDialog.js`)
- **camelCase**: JavaScript variables and functions (`healthCheck`, `showModal()`)
- **kebab-case**: HTML IDs and CSS classes (`service-card`, `modal-overlay`)
- **UPPER_SNAKE_CASE**: Environment variables (`ADMIN_PASSWORD`, `DATABASE_URL`)

---

## 🧩 Component Architecture Standards

### **Base Components** (`components/base/`)
**Purpose**: Generic, reusable across any application

**Structure Pattern**:
```javascript
/**
 * Base Component - Generic and reusable
 * Following SOLID principles
 */
class BaseComponent {
    constructor(id, options = {}) {
        this.id = id;
        this.options = { ...defaults, ...options };
        this.initialize();
    }
    
    initialize() {
        this.createElement();
        this.bindEvents();
    }
    
    createElement() {
        // Create DOM structure
        this.element = document.createElement('div');
        this.element.id = this.id;
        this.element.className = 'component-name';
        document.body.appendChild(this.element);
    }
    
    bindEvents() {
        // Event listeners setup
    }
    
    // Core lifecycle methods
    show() { }
    hide() { }
    destroy() { }
    
    // Event callback setters
    onOpenCallback(callback) { this.onOpen = callback; return this; }
    onCloseCallback(callback) { this.onClose = callback; return this; }
}
```

**Base Component Requirements**:
- ✅ **Highly configurable** through options object
- ✅ **Self-contained** with own DOM management
- ✅ **Chainable methods** for fluent API
- ✅ **Event-driven** with callback support
- ✅ **Clean destruction** with memory management
- ✅ **No app-specific logic** - generic only

### **App Components** (`components/app/`)
**Purpose**: Application-specific implementations

**Structure Pattern**:
```javascript
/**
 * App Component - Application-specific implementation
 * Extends base component with business logic
 */
class AppComponent extends BaseComponent {
    constructor() {
        super('componentId', appSpecificOptions);
        this.initializeAppFeatures();
    }
    
    initializeAppFeatures() {
        this.loadData();
        this.setupAppSpecificLogic();
    }
    
    // App-specific methods
    async loadData() {
        // API calls, data loading
    }
    
    handleSubmit() {
        // Business logic
    }
    
    // Override base methods when needed
    show() {
        // App-specific setup
        this.loadData();
        return super.show();
    }
}

// Global instance and backward compatibility
let componentInstance = null;

function showComponent() {
    if (!componentInstance) {
        componentInstance = new AppComponent();
    }
    componentInstance.show();
}
```

**App Component Requirements**:
- ✅ **Extends base components** when applicable
- ✅ **Contains business logic** specific to the app
- ✅ **API integrations** and data handling
- ✅ **Backward compatibility** with global functions
- ✅ **Error handling** with user feedback

### **Component Integration Rules**

**HTML Integration**:
```html
<!-- Component CSS in order: base first, then app -->
<link rel="stylesheet" href="/components/base/ModalDialog/ModalDialog.css">
<link rel="stylesheet" href="/components/app/SettingsDialog/SettingsDialog.css">

<!-- Component Scripts in order: base first, then app -->
<script src="/components/base/ModalDialog/ModalDialog.js"></script>
<script src="/components/app/SettingsDialog/SettingsDialog.js"></script>
```

**Server Routes**:
```javascript
// Static routes for components
app.use('/components', express.static(path.join(__dirname, 'public', 'components')));
```

---

## 🗄️ Database Architecture Standards

### **Database Class Pattern**
```javascript
class Database {
    constructor() {
        this.dbPath = path.join(__dirname, '..', 'data', 'database.db');
        this.db = null;
        this.initialized = false;
    }

    async init() {
        if (this.initialized) return Promise.resolve();
        
        return new Promise((resolve, reject) => {
            // Database connection and setup
            this.db = new sqlite3.Database(this.dbPath, (err) => {
                if (err) {
                    reject(err);
                } else {
                    this.createTables().then(() => {
                        this.initialized = true;
                        resolve();
                    }).catch(reject);
                }
            });
        });
    }

    async createTables() {
        // Table creation with proper constraints
        // Foreign keys, indexes, defaults
    }

    // CRUD Pattern for each entity
    async getAllEntities() { }
    async getEntity(id) { }
    async createEntity(data) { }
    async updateEntity(id, updates) { }
    async deleteEntity(id) { }
}
```

**Database Requirements**:
- ✅ **Promise-based** async operations
- ✅ **Proper error handling** with meaningful messages
- ✅ **Data validation** before database operations
- ✅ **Foreign key constraints** for data integrity
- ✅ **Default values** and proper schema design
- ✅ **Cleanup methods** for maintenance
- ✅ **Transaction support** where needed

### **SQL Schema Standards**
```sql
CREATE TABLE IF NOT EXISTS entities (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    type TEXT NOT NULL DEFAULT 'default',
    config TEXT,  -- JSON for flexible config
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_entities_type ON entities(type);
CREATE INDEX IF NOT EXISTS idx_entities_created ON entities(created_at);
```

---

## 🌐 Server Architecture Standards

### **Server Setup Pattern**
```javascript
const express = require('express');
const session = require('express-session');
const http = require('http');
const socketIo = require('socket.io');
const helmet = require('helmet');
const compression = require('compression');
const cors = require('cors');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: { origin: "*", methods: ["GET", "POST"] }
});

// Security middleware first
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginOpenerPolicy: false,
  originAgentCluster: false
}));

// Performance middleware
app.use(compression());
app.use(cors());

// Body parsing
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session management
app.use(session({
  secret: process.env.SESSION_SECRET || 'default-secret',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false, // Set to true for HTTPS
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  }
}));
```

### **Authentication Pattern**
```javascript
// Multiple auth methods support
function hashPassword(password) {
  return crypto.createHash('sha256').update(password + 'salt').digest('hex');
}

function validateAuthToken(token, password) {
  const hashedPassword = hashPassword(password);
  return token === hashedPassword;
}

// Authentication middleware
const requireAuth = (req, res, next) => {
  if (req.session.authenticated) {
    next();
  } else {
    res.status(401).json({ error: 'Authentication required' });
  }
};

// Multiple login endpoints
app.post('/login', async (req, res) => { }); // Basic login
app.post('/api/login', async (req, res) => { }); // API login
app.post('/api/auto-login', async (req, res) => { }); // Token-based
```

### **API Route Standards**
```javascript
// RESTful CRUD pattern
app.get('/api/entities', requireAuth, async (req, res) => {
  try {
    const entities = await database.getAllEntities();
    res.json(entities);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/entities', requireAuth, async (req, res) => {
  try {
    const result = await database.createEntity(req.body);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.put('/api/entities/:id', requireAuth, async (req, res) => {
  try {
    const result = await database.updateEntity(req.params.id, req.body);
    if (result.changes === 0) {
      return res.status(404).json({ error: 'Entity not found' });
    }
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
```

### **WebSocket Integration**
```javascript
// WebSocket for real-time updates
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);

  // Send initial data
  socket.emit('initial-data', getCurrentData());

  // Handle client requests
  socket.on('request-update', () => {
    socket.emit('data-update', getCurrentData());
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// Broadcast updates to all clients
const broadcastUpdate = () => {
  io.emit('data-update', getCurrentData());
};
```

---

## 🎨 Frontend Architecture Standards

### **Main Application Controller**
```javascript
class MainApplication {
    constructor() {
        this.socket = null;
        this.data = {};
        this.currentPage = 'main';
        this.updateTimeout = null; // For debouncing
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.checkAuth();
        this.setupSocketConnection();
    }

    bindEvents() {
        // Global event bindings
        // Form submissions, button clicks, etc.
    }

    async checkAuth() {
        try {
            const response = await fetch('/api/status');
            if (response.ok) {
                this.showApp();
            } else {
                this.showLogin();
            }
        } catch (error) {
            this.showLogin();
        }
    }

    setupSocketConnection() {
        this.socket = io();
        
        this.socket.on('connect', () => {
            console.log('Connected to WebSocket');
            this.updateConnectionStatus(true);
        });

        this.socket.on('disconnect', () => {
            console.log('Disconnected from WebSocket');
            this.updateConnectionStatus(false);
        });

        // Debounced data updates
        this.socket.on('data-update', (data) => {
            if (this.updateTimeout) {
                clearTimeout(this.updateTimeout);
            }
            
            this.updateTimeout = setTimeout(() => {
                this.updateData(data);
                this.updateTimeout = null;
            }, 100); // 100ms debounce
        });
    }
}

// Global instance
window.app = new MainApplication();
```

### **Smart Rendering Patterns**
```javascript
// Smart updates instead of full re-renders
updateData(newData) {
    // Check if full re-render is needed
    const needsFullRender = this.dataStructureChanged(this.data, newData);
    
    if (needsFullRender) {
        this.data = newData;
        this.renderAll();
        return;
    }
    
    // Smart update: only update changed items
    this.data = newData;
    this.updateChangedItems(newData);
}

updateChangedItems(newData) {
    // Compare and update only changed elements
    Object.entries(newData).forEach(([key, value]) => {
        const element = document.querySelector(`[data-id="${key}"]`);
        if (element) {
            this.updateElement(element, value);
        }
    });
}
```

---

## 🎨 CSS & Styling Standards

### **Component-Scoped CSS**
```css
/* Base component styles - generic */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    z-index: 1000;
}

.modal.show {
    display: flex;
    animation: fadeIn 0.3s ease;
}

.modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
}

.modal-content {
    position: relative;
    margin: auto;
    background: var(--color-background);
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
}
```

### **Design System Colors**
```css
:root {
    /* Catppuccin-inspired dark theme */
    --color-primary: #89b4fa;          /* Blue */
    --color-secondary: #f5c2e7;        /* Pink */
    --color-success: #a6e3a1;          /* Green */
    --color-warning: #fab387;          /* Orange */
    --color-danger: #f38ba8;           /* Red */
    
    --color-background: #1e1e2e;       /* Dark background */
    --color-surface: #313244;          /* Card background */
    --color-text-primary: #cdd6f4;     /* Primary text */
    --color-text-secondary: #bac2de;   /* Secondary text */
    --color-border: #45475a;           /* Borders */
}
```

### **Responsive Design Standards**
```css
/* Mobile-first approach */
.container {
    width: 100%;
    padding: 0 1rem;
}

@media (min-width: 768px) {
    .container {
        max-width: 768px;
        margin: 0 auto;
    }
}

@media (min-width: 1024px) {
    .container {
        max-width: 1024px;
    }
}

/* Grid systems */
.grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}
```

---

## 🔒 Security Standards

### **Authentication & Authorization**
```javascript
// Password hashing with salt
const SALT = 'project_specific_salt_2024';

function hashPassword(password) {
    return crypto.createHash('sha256').update(password + SALT).digest('hex');
}

// Multiple auth methods for flexibility
function validateAuth(credentials) {
    // Support multiple auth formats
    const methods = [
        () => validateSessionAuth(credentials),
        () => validateTokenAuth(credentials),
        () => validatePasswordAuth(credentials)
    ];
    
    return methods.some(method => method());
}
```

### **Input Validation**
```javascript
// Server-side validation
function validateServiceData(data) {
    const errors = [];
    
    if (!data.name || data.name.trim().length === 0) {
        errors.push('Name is required');
    }
    
    if (data.type === 'http' && !data.url) {
        errors.push('URL is required for HTTP services');
    }
    
    if (data.timeout && (data.timeout < 1 || data.timeout > 300)) {
        errors.push('Timeout must be between 1 and 300 seconds');
    }
    
    return errors;
}
```

### **Error Handling**
```javascript
// Consistent error responses
function handleError(res, error, statusCode = 500) {
    console.error('Error:', error);
    res.status(statusCode).json({
        error: error.message || 'Internal server error',
        timestamp: new Date().toISOString()
    });
}

// Try-catch pattern for all async operations
app.post('/api/endpoint', requireAuth, async (req, res) => {
    try {
        const result = await processRequest(req.body);
        res.json(result);
    } catch (error) {
        handleError(res, error);
    }
});
```

---

## 📦 Development & Deployment Standards

### **Environment Configuration**
```bash
# .env.example
# Server Configuration
PORT=3000
NODE_ENV=development

# Security
ADMIN_PASSWORD=change_me_in_production
SESSION_SECRET=change_me_in_production

# Database
DATABASE_PATH=./data/app.db
```

### **Docker Configuration**
```dockerfile
# Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
RUN npm ci --only=production

# Copy application code
COPY . .

# Create data directory
RUN mkdir -p data

# Use non-root user
USER node

EXPOSE 3000

CMD ["node", "server.js"]
```

```yaml
# docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - NODE_ENV=production
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
```

### **Package.json Standards**
```json
{
  "name": "project-name",
  "version": "1.0.0",
  "description": "Project description",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"No tests yet\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "helmet": "^7.1.0",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "socket.io": "^4.7.4",
    "sqlite3": "^5.1.7",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
```

---

## 📚 Documentation Standards

### **README Structure**
```markdown
# Project Name

Brief description with key features

## ✨ Features
- Feature list with emojis for visual appeal

## 🏗️ Architecture
- Core components overview
- Technology stack

## 🚀 Quick Start
- Docker setup (recommended)
- Local development setup

## 📁 Project Structure
```
project-structure/
```

## ⚙️ Configuration
- Environment variables
- Configuration files

## 📊 Features Deep Dive
- Detailed feature explanations

## 🐳 Docker Deployment
- Production setup
- Integration guides

## 🛠️ Development
- Adding new features
- Extending functionality
```

### **Code Documentation**
```javascript
/**
 * Component Name - Brief description
 * 
 * Detailed description of what this component does,
 * its purpose, and how it fits into the application.
 * 
 * @example
 * const component = new ComponentName('id', {
 *   option1: 'value1',
 *   option2: 'value2'
 * });
 * component.show();
 */
class ComponentName {
    /**
     * Creates a new component instance
     * @param {string} id - Unique identifier for the component
     * @param {Object} options - Configuration options
     * @param {boolean} options.autoShow - Show component on creation
     */
    constructor(id, options = {}) {
        // Implementation
    }
    
    /**
     * Shows the component
     * @returns {ComponentName} - Returns this for method chaining
     */
    show() {
        // Implementation
        return this;
    }
}
```

---

## ✅ Quality Checklist

### **Before Every Commit**
- [ ] All async operations have proper error handling
- [ ] No console.log statements in production code (use proper logging)
- [ ] All user inputs are validated
- [ ] Database operations use transactions where appropriate
- [ ] Components have cleanup methods implemented
- [ ] CSS follows component-scoped patterns
- [ ] No hardcoded values (use environment variables)
- [ ] Security headers are configured
- [ ] WebSocket connections are properly managed

### **Before Every Release**
- [ ] Default passwords are changed
- [ ] Environment variables are documented
- [ ] Docker configuration is tested
- [ ] All endpoints have proper authentication
- [ ] Database migrations are documented
- [ ] Performance is acceptable (no obvious bottlenecks)
- [ ] Error handling provides useful feedback
- [ ] Documentation is up to date

---

## 🚀 Getting Started With These Rules

1. **Start with Structure**: Create the directory structure following the standards
2. **Copy Templates**: Use the code patterns as templates for new components
3. **Follow Naming**: Use consistent naming conventions throughout
4. **Security First**: Implement authentication and validation from the start
5. **Document Everything**: Write clear READMEs and code documentation
6. **Test Locally**: Use Docker for consistent development environment
7. **Iterate Safely**: Use the database patterns for safe data operations

---


*These rules are based on the clean, scalable architecture of DotBox Monitor. They ensure consistency, maintainability, and professional-grade code quality across all projects.* 